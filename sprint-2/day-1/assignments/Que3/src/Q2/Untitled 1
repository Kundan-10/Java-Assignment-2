		Q2) Explain the difference between Checked and Unchecked exceptions. write some
		examples of checked and unchecked exception classes.
 
                           **   Checked   **
  
        dif:--
        
        --the classes which are direct child of the Exception class (except RuntimeException class) is known as
         checked exception class (including Exception class also);
		
		These are the exceptions that are checked at compile time. If some code within a method
	    throws a checked exception, then the method must either handle the exception or it must specify the
	    
		exception using the throws keyword. In checked exception, there are two types: fully checked and partially 
		checked exceptions. A fully checked exception is a checked exception where all its child classes are 
		also checked, like IOException, InterruptedException. A partially checked exception is a checked exception 
		where some of its child classes are unchecked, like Exception.



		// Java Program to Illustrate Checked Exceptions
		// Where FileNotFoundException occurred
 
		// Importing I/O classes
		import java.io.*;
		 
		// Main class
		class GFG {
		 
		    // Main driver method
		    public static void main(String[] args)
		    {
		 
		        // Reading file from path in local directory
		        FileReader file = new FileReader("C:\\test\\a.txt");
		 
		        // Creating object as one of ways of taking input
		        BufferedReader fileInput = new BufferedReader(file);
		 
		        // Printing first 3 lines of file "C:\test\a.txt"
		        for (int counter = 0; counter < 3; counter++)
		            System.out.println(fileInput.readLine());
		 
		        // Closing file connections
		        // using close() method
		        fileInput.close();
		    }
		}
		
		
		
		       **   unchecked   **
		       
		       
		       def:-
		       
		    the classes which are the direct child of RuntimeException including the RuntimeException class is known as 
             unchecked exception.
             
            These are the exceptions that are not checked at compile time. In C++, all exceptions are unchecked, 
            so it is not forced by the compiler to either handle or specify the exception. It is up to the programmers to be civilized, and specify or catch the exceptions. In Java, exceptions under Error and RuntimeException classes are unchecked exceptions, everything else under throwable is checked. 
            Consider the following Java program. It compiles fine, but it throws ArithmeticException when run.
             The compiler allows it to compile because ArithmeticException is an unchecked exception.
               
               
           // Java Program to Illustrate Un-checked Exceptions

			// Main class
			class GFG {
			
				// Main driver method
				public static void main(String args[])
				{
					// Here we are dividing by 0
					// which will not be caught at compile time
					// as there is no mistake but caught at runtime
					// because it is mathematically incorrect
					int x = 0;
					int y = 10;
					int z = y / x;
				}
			}
               
               
               Output: 

			Exception in thread "main" java.lang.ArithmeticException: / by zero
			at Main.main(Main.java:5)
			
			Java Result: 1
               
		       