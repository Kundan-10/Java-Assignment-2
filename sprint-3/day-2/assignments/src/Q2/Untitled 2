Q2/- What’s the difference between class lock and object lock?


Object-level lock:

 Every object in java has a unique lock. Whenever we are using a synchronized keyword, 
then only the lock concept will come into the picture. If a thread wants to execute then synchronized method
 on the given object. First, it has to get a lock-in that object. Once the thread got the lock then it is
  allowed to execute any synchronized method on that object. Once method execution completes automatically 
  thread releases the lock. Acquiring and release lock internally is taken care of by JVM and the programmer
   is not responsible for these activities. Let’s have a look at the below program to understand the object 
   level lock:
   
   
   
   // Java program to illustrate
// Object lock concept
class Geek implements Runnable {
	public void run() { Lock(); }
	public void Lock()
	{
		System.out.println(
			Thread.currentThread().getName());
		synchronized (this)
		{
			System.out.println(
				"in block "
				+ Thread.currentThread().getName());
			System.out.println(
				"in block "
				+ Thread.currentThread().getName()
				+ " end");
		}
	}

	public static void main(String[] args)
	{
		Geek g = new Geek();
		Thread t1 = new Thread(g);
		Thread t2 = new Thread(g);
		Geek g1 = new Geek();
		Thread t3 = new Thread(g1);
		t1.setName("t1");
		t2.setName("t2");
		t3.setName("t3");
		t1.start();
		t2.start();
		t3.start();
	}
}



--------------------------------------------------------------------------------------------


Class level lock:

 Every class in Java has a unique lock which is nothing but a class level lock. If a thread wants 
 to execute a static synchronized method, then the thread requires a class level lock.
  Once a thread got the class level lock, then it is allowed to execute any static 
  synchronized method of that class. Once method execution completes automatically thread 
  releases the lock. Let’s look at the below program for better understanding:
   
   
   
   // Java program to illustrate class level lock
class Geek implements Runnable {
	public void run() { Lock(); }

	public void Lock()
	{
		System.out.println(
			Thread.currentThread().getName());
		synchronized (Geek.class)
		{
			System.out.println(
				"in block "
				+ Thread.currentThread().getName());
			System.out.println(
				"in block "
				+ Thread.currentThread().getName()
				+ " end");
		}
	}

	public static void main(String[] args)
	{
		Geek g1 = new Geek();
		Thread t1 = new Thread(g1);
		Thread t2 = new Thread(g1);
		Geek g2 = new Geek();
		Thread t3 = new Thread(g2);
		t1.setName("t1");
		t2.setName("t2");
		t3.setName("t3");
		t1.start();
		t2.start();
		t3.start();
	}
}
   