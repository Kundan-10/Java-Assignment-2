Race-condition:


Java is a multi-threaded programming language and there is a higher risk to occur race conditions. Because the
same resource may be accessed by multiple threads at the same time and may change the data.
A race-condition is a condition in which the critical section (a part of the program where shared memory is accessed)
is concurrently executed by two or more threads. It leads to incorrect behavior of a program.
In layman terms, a race condition can be defined as, a condition in which two or more threads compete together to
get certain shared resources.
For example, if thread A is reading data from the linked list and another thread B is trying to delete the same data.
This process leads to a race condition that may result in run time error


To solve the data inconsistency problem in java synchronized keyword is used.
So the thread-safety is achieved and race condition is avoided by the help of synchronized keyword.


example:-

class Common{
public void fun1(Stirng name){
System.out.print("Welcome");
try{
Thread.sleep(1000);
}
catch(Exception ee){
}
System.out.println(name);
}


class ThreadA extends Thread{
Common c;
String name;
public ThreadA(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}
class ThreadB extends Thread{
Common c;
String name;
public ThreadB(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}
class Main{
public static void main(String[] args){
Common c=new Common();
//sharing same Common object to two thread
ThreadA t1=new ThreadA(c,"Ram");
ThreadB t2=new ThreadB(c,"Shyam");
t1.start();


t2.start();
}
}

Now the output will be hello hello Ram Shyam which is not expected.
We can get the desired output if we avoid two thread acting on fun1() simultaneously.
To achieve this requirement we need to make fun1() as synchronized.
Note: The synchronized keyword applicable only for methods and blocks but not for variables and classes.
If a method or block is declared as synchronized then at a time only one thread is allowed to execute that method or
block on a given object so that data inconsistency problem will be resolved.
The main advantage of the synchronized keyword is we can resolve data inconsistency problem. but the main
disadvantage of the synchronized keyword is it increases waiting time of the threads and creates performance
problem on it. hence if there is no specific requirement then it is never recommended to use the synchronized
keyword.
Example:
checking seat availability method should be non-synchronized, where as book seat method should be
synchronized
Any method that changes the state of an object. i.e. add/update/delete/replace method we should use as
synchronized.


